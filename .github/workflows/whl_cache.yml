name: Build and Cache Wheel

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  vcpkg-cache:
    runs-on: ubuntu-latest

    env:
      VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      VCPKG_BINARY_SOURCES: clear;nuget,${{ env.FEED_URL }},readwrite
      GH_PACKAGES_TOKEN: ${{ secrets.VCPKG_PACKAGES }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore vcpkg cache
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ github.sha }}

      - name: Install Mono for nuget.exe
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete

      - name: Clone & bootstrap vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git vcpkg
          cd vcpkg
          git checkout tags/2023.10.19
          ./bootstrap-vcpkg.sh
        shell: bash

      - name: Configure NuGet feed and API key
        run: |
          nuget_path="$($VCPKG_EXE fetch nuget | tail -n1 | tr -d '\r')"
          mono "$nuget_path" sources add \
            -Name GitHubPackages \
            -Source "$FEED_URL" \
            -UserName "${{ github.repository_owner }}" \
            -Password "$GH_PACKAGES_TOKEN" \
            -StorePasswordInClearText
          mono "$nuget_path" setapikey "$GH_PACKAGES_TOKEN" -Source "$FEED_URL"
        shell: bash

      - name: Install C++ dependencies via vcpkg
        run: |
          cd vcpkg
          ./vcpkg install gsl armadillo jsoncpp boost-circular-buffer openblas lapack-reference  # pull cached binaries 
        shell: bash

      - name: Save vcpkg cache
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/buildtrees
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ github.sha }}-postinstall

  build-wheel:
    needs: vcpkg-cache
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9','3.10']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: pip install --upgrade pip build wheel ninja cmake

      - name: Build wheel with vcpkg toolchain
        env:
          SKBUILD_CMAKE_ARGS: "-G Ninja;-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        run: python -m build --wheel --outdir dist

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: c_spikes-wheel-${{ matrix.python-version }}
          path: dist/*.whl
